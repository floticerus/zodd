{
  "name": "nbqueue",
  "version": "0.0.5",
  "description": "nbqueue\r =======",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/kvonflotow/nbqueue.git"
  },
  "keywords": [
    "queue",
    "functions",
    "node",
    "nodejs",
    "javascript",
    "js",
    "async"
  ],
  "author": {
    "name": "kevin von flotow"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kvonflotow/nbqueue/issues"
  },
  "homepage": "https://github.com/kvonflotow/nbqueue",
  "readme": "nbqueue\r\n=======\r\n\r\nsuper simple queue module for executing async functions in node.js. nbqueue was created as a module for [nodebee](//github.com/kvonflotow/nodebee/), a pure javascript database.\r\n\r\n## installation\r\n`npm install nbqueue`\r\n\r\n## uses\r\n\r\n#### limiting the number of functions being executed\r\n\r\nwhen accessing large amounts of files asynchronously, bad things can happen. for example, take a directory with 20,000 files in it and try accessing them all at once.\r\n\r\nwith nbqueue you can set the maxProcesses to a sane amount, like 100, and it will execute a maximum of 100 functions at a time. functions added after the limit has been reached will execute as the previous functions finish up.\r\n\r\nthis is also crucial for maintaining a sane level of forked child processes.\r\n\r\n```javascript\r\nvar fs = require( 'fs' )\r\n\r\nvar Queue = require( 'nbqueue' )\r\n\r\nfs.readdir( directory, function ( err, files )\r\n\t{\r\n\t\t// set maxProcesses to 100\r\n\t\tvar queue = new Queue( 100 )\r\n\r\n\t\tfiles.forEach( function ( file )\r\n\t\t\t{\r\n\t\t\t\tqueue.add( function ( next )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfs.readFile( file, function ( err, data )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnext( err, data )\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\t// because next takes the same arguments as the readFile callback, you could do\r\n\t\t\t\t\t\t// fs.readFile( file, next )\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t\tqueue.done( function ( err, results )\r\n\t\t\t{\r\n\t\t\t\tif ( err )\r\n\t\t\t\t{\r\n\t\t\t\t\t// if there were errors, they will be in an array\r\n\t\t\t\t\tconsole.log( err )\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// results contains an array of the results passed to next()\r\n\t\t\t\tconsole.log( results )\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n)\r\n```\r\n\r\n#### executing async functions in order\r\n\r\nsetting maxProcesses to 1 will ensure only 1 function can be executed at a time.\r\n\r\n#### queues within queues\r\n\r\nqueue up multiple sets of async functions, and let a the master queue know when they're all finished. here's a not very useful example:\r\n\r\n```javascript\r\nvar masterQueue = new Queue()\r\n\r\nmasterQueue.add( function ( nextMaster )\r\n\t{\r\n\t\tFS.readdir( '/path/to/directory1', function ( err, files )\r\n\t\t\t{\r\n\t\t\t\tif ( err )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn nextMaster( err )\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar queue1 = new Queue( 50 )\r\n\r\n\t\t\t\tfiles.forEach( function ( file )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tqueue1.add( function ( next )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// do some other stuff here\r\n\r\n\t\t\t\t\t\t\t\tnext( null, file )\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\r\n\t\t\t\tqueue1.done( function ( err, results )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnextMaster( err, results )\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n)\r\n\r\nmasterQueue.add( function ( nextMaster )\r\n\t{\r\n\t\tFS.readdir( '/path/to/directory2', function ( err, files )\r\n\t\t\t{\r\n\t\t\t\tif ( err )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn nextMaster( err )\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar queue2 = new Queue( 50 )\r\n\r\n\t\t\t\tfiles.forEach( function ( file )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tqueue2.add( function ( next )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// do some other stuff here\r\n\r\n\t\t\t\t\t\t\t\tnext( null, file )\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\r\n\t\t\t\tqueue2.done( function ( err, results )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnextMaster( err, results )\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n)\r\n\r\nmasterQueue.done( function ( err, results )\r\n\t{\r\n\t\tif ( err )\r\n\t\t{\r\n\t\t\treturn console.log( err )\r\n\t\t}\r\n\r\n\t\t// results contains the filenames from both directories\r\n\t\tconsole.log( results )\r\n\t}\r\n)\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "nbqueue@0.0.5",
  "dist": {
    "shasum": "0f08b508400dc4c4094e192164f6df60572825e9"
  },
  "_from": "nbqueue@0.0.5",
  "_resolved": "https://registry.npmjs.org/nbqueue/-/nbqueue-0.0.5.tgz"
}
